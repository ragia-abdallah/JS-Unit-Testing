{"version":3,"sources":["helpers.test.js"],"names":["require","getLicenseValidity","transformArryToString","it","t","array","delimiter","result","is","error","instanceOf","Error","message","undefined","test","lolex","beforeEach","context","clock","install","afterEach","uninstall","setSystemTime","Date"],"mappings":";;eAAsDA,OAAO,CAAC,yBAAD,C;IAArDC,kB,YAAAA,kB;IAAoBC,qB,YAAAA,qB;;AAC5B,IAAMC,EAAE,GAAGH,OAAO,CAAC,KAAD,CAAP,WAAX;;AACAG,EAAE,CAAC,8DAAD,EAAiE,UAAAC,CAAC,EAAI;AACpE,MAAMC,KAAK,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,QAApB,CAAd;AACA,MAAMC,SAAS,GAAG,GAAlB;AACA,MAAMC,MAAM,GAAGL,qBAAqB,CAACI,SAAD,EAAYD,KAAZ,CAApC;AACAD,EAAAA,CAAC,CAACI,EAAF,CAAKD,MAAL,EAAa,qBAAb;AACH,CALC,CAAF,C,CAOA;;AACAJ,EAAE,CAAC,6DAAD,EAAgE,UAAAC,CAAC,EAAI;AACnE,MAAMC,KAAK,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,QAApB,CAAd;AACA,MAAMC,SAAS,GAAG,GAAlB;AACA,MAAMG,KAAK,GAAGL,CAAC,UAAD,CAAS,YAAM;AACzBF,IAAAA,qBAAqB,CAACI,SAAD,EAAYD,KAAZ,CAArB;AACH,GAFa,EAEX;AAAEK,IAAAA,UAAU,EAAEC;AAAd,GAFW,CAAd;AAGAP,EAAAA,CAAC,CAACI,EAAF,CAAKC,KAAK,CAACG,OAAX,EAAoB,mBAApB;AACH,CAPC,CAAF;AASAT,EAAE,CAAC,+DAAD,EAAkE,UAAAC,CAAC,EAAI;AACrE,MAAMC,KAAK,GAAG,EAAd;AACA,MAAMC,SAAS,GAAG,GAAlB;AACA,MAAMC,MAAM,GAAGL,qBAAqB,CAACI,SAAD,EAAYD,KAAZ,CAApC;AACAD,EAAAA,CAAC,CAACI,EAAF,CAAKD,MAAL,EAAa,EAAb;AACH,CALC,CAAF;AAOAJ,EAAE,CAAC,6DAAD,EAAgE,UAAAC,CAAC,EAAI;AACnE,MAAMC,KAAK,GAAG,qBAAd;AACA,MAAMC,SAAS,GAAG,GAAlB;AACA,MAAMC,MAAM,GAAGL,qBAAqB,CAACI,SAAD,EAAYD,KAAZ,CAApC;AACAD,EAAAA,CAAC,CAACI,EAAF,CAAKD,MAAL,EAAaM,SAAb;AACH,CALC,CAAF,C,CAOA;AACA;AACA;AACA;;AACA,IAAMC,IAAI,GAAGd,OAAO,CAAC,KAAD,CAApB;;AACA,IAAMe,KAAK,GAAGf,OAAO,CAAC,OAAD,CAArB;;AAGAc,IAAI,CAACE,UAAL,CAAgB,UAAAZ,CAAC,EAAI;AACnBA,EAAAA,CAAC,CAACa,OAAF,CAAUC,KAAV,GAAkBH,KAAK,CAACI,OAAN,EAAlB;AACD,CAFD;AAIAL,IAAI,CAACM,SAAL,CAAe,UAAAhB,CAAC,EAAI;AAClBA,EAAAA,CAAC,CAACa,OAAF,CAAUC,KAAV,CAAgBG,SAAhB;AACD,CAFD;AAIAP,IAAI,CAAC,sDAAD,EAAyD,UAAAV,CAAC,EAAI;AAChEA,EAAAA,CAAC,CAACa,OAAF,CAAUC,KAAV,CAAgBI,aAAhB,CAA8B,IAAIC,IAAJ,CAAS,YAAT,CAA9B;AAEA,MAAMhB,MAAM,GAAGN,kBAAkB,EAAjC;AAEAG,EAAAA,CAAC,CAACI,EAAF,CAAKD,MAAL,EAAa,OAAb;AACD,CANG,CAAJ;AAQAO,IAAI,CAAC,uDAAD,EAA0D,UAAAV,CAAC,EAAI;AACjEA,EAAAA,CAAC,CAACa,OAAF,CAAUC,KAAV,CAAgBI,aAAhB,CAA8B,IAAIC,IAAJ,CAAS,YAAT,CAA9B;AAEA,MAAMhB,MAAM,GAAGN,kBAAkB,EAAjC;AAEAG,EAAAA,CAAC,CAACI,EAAF,CAAKD,MAAL,EAAa,SAAb;AACD,CANG,CAAJ","sourcesContent":["const { getLicenseValidity, transformArryToString } = require('../../src/helpers/utils');\nconst it = require('ava').default;\nit('transformArryToString returns a string joined with delimiter', t => {\n    const array = ['apple', 'banana', 'orange'];\n    const delimiter = ',';\n    const result = transformArryToString(delimiter, array);\n    t.is(result, 'apple,banana,orange');\n});\n\n// Negative scenario tests\nit('transformArryToString throws an error for invalid delimiter', t => {\n    const array = ['apple', 'banana', 'orange'];\n    const delimiter = 123;\n    const error = t.throws(() => {\n        transformArryToString(delimiter, array);\n    }, { instanceOf: Error });\n    t.is(error.message, 'invalid delimeter');\n});\n\nit('transformArryToString returns an empty string for empty array', t => {\n    const array = [];\n    const delimiter = ',';\n    const result = transformArryToString(delimiter, array);\n    t.is(result, '');\n});\n\nit('transformArryToString returns undefined for non-array input', t => {\n    const array = 'apple,banana,orange';\n    const delimiter = ',';\n    const result = transformArryToString(delimiter, array);\n    t.is(result, undefined);\n});\n\n// hint useFakeTimer\n// it(\"getLicenseValidity\", () => {\n//     getLicenseValidity()\n// })\nconst test = require('ava');\nconst lolex = require('lolex'); \n\n\ntest.beforeEach(t => {\n  t.context.clock = lolex.install(); \n});\n\ntest.afterEach(t => {\n  t.context.clock.uninstall(); \n});\n\ntest('returns \"valid\" when the current year is before 2026', t => {\n  t.context.clock.setSystemTime(new Date('2022-01-01')); \n\n  const result = getLicenseValidity();\n\n  t.is(result, 'valid');\n});\n\ntest('returns \"invalid\" when the current year is after 2025', t => {\n  t.context.clock.setSystemTime(new Date('2026-01-01')); \n\n  const result = getLicenseValidity();\n\n  t.is(result, 'invalid');\n});\n\n\n\n\n"],"file":"helpers.test.dev.js"}