{"version":3,"sources":["helpers.test.js"],"names":["require","getLicenseValidity","transformArryToString","it","t","result","is","delimiter","error","array","instanceOf","Error","message","undefined","test","lolex","context","clock","install","beforeEach","uninstall","setSystemTime","Date"],"mappings":"0BAAsDA,QAAQ,2BAAtDC,4BAAAA,mBAAoBC,+BAAAA,sBACtBC,GAAKH,QAAQ,OAAR,QACXG,GAAG,+DAAgE,SAAAC,GAF3DH,IAKEI,EAASH,sBALSA,IAApBD,CAAAA,QAGoB,SAHpBA,WACFE,EAAEG,GAAGN,EAAQ,yBAGfG,GAAA,8DAAA,SAAAC,GACA,IAAMC,EAASH,CAAAA,QAAAA,SAAsBK,UAIzCC,EAAAJ,EAAA,OAAA,WAKQF,sBARS,IAQwBO,IAJtC,CAAAC,WAAAC,QACCP,EAAMK,GAAAA,EAASG,QAAS,uBAGpBV,GAAAA,gEAAA,SAAAE,GADU,IAAdC,EAAAH,sBAEiBS,IAAd,IACDL,EAAFA,GAAKE,EAAMI,MAIXT,GAAA,8DAAA,SAAAC,GACA,IAEKC,EAALH,sBADeA,IADG,uBAFtBE,EAAAE,GAAAD,OAAAQ,KAeA,IAAAC,KAAAd,QAAA,OACAe,MAAAf,QAAA,SAEAc,KAAMA,WAAOd,SAAAA,GAKXI,EAAEY,QAAQC,MAAQF,MAAMG,YAD1BJ,KAAKK,UAAL,SAAAf,GACEA,EAAEY,QAAQC,MAAVG,cAIAhB,KAAEY,uDAAF,SAAAZ,GADFA,EAAAY,QAAAC,MAAAI,cAAA,IAAAC,KAAA,eAKElB,IAAEY,EAAFf,qBAIAG,EAAEE,GAAGD,EAAQ,WAIbD,KAAEY,wDAAF,SAAAZ,GAEAA,EAAAY,QAAYC,MAAGhB,cAAAA,IAAfqB,KAAA,eAHF,IAAAjB,EAAAJ,qBAKEG,EAAEE,GAAGD,EAAQ","file":"helpers.test.min.js","sourcesContent":["const { getLicenseValidity, transformArryToString } = require('../../src/helpers/utils');\nconst it = require('ava').default;\nit('transformArryToString returns a string joined with delimiter', t => {\n    const array = ['apple', 'banana', 'orange'];\n    const delimiter = ',';\n    const result = transformArryToString(delimiter, array);\n    t.is(result, 'apple,banana,orange');\n});\n\n// Negative scenario tests\nit('transformArryToString throws an error for invalid delimiter', t => {\n    const array = ['apple', 'banana', 'orange'];\n    const delimiter = 123;\n    const error = t.throws(() => {\n        transformArryToString(delimiter, array);\n    }, { instanceOf: Error });\n    t.is(error.message, 'invalid delimeter');\n});\n\nit('transformArryToString returns an empty string for empty array', t => {\n    const array = [];\n    const delimiter = ',';\n    const result = transformArryToString(delimiter, array);\n    t.is(result, '');\n});\n\nit('transformArryToString returns undefined for non-array input', t => {\n    const array = 'apple,banana,orange';\n    const delimiter = ',';\n    const result = transformArryToString(delimiter, array);\n    t.is(result, undefined);\n});\n\n// hint useFakeTimer\n// it(\"getLicenseValidity\", () => {\n//     getLicenseValidity()\n// })\nconst test = require('ava');\nconst lolex = require('lolex'); \n\n\ntest.beforeEach(t => {\n  t.context.clock = lolex.install(); \n});\n\ntest.afterEach(t => {\n  t.context.clock.uninstall(); \n});\n\ntest('returns \"valid\" when the current year is before 2026', t => {\n  t.context.clock.setSystemTime(new Date('2022-01-01')); \n\n  const result = getLicenseValidity();\n\n  t.is(result, 'valid');\n});\n\ntest('returns \"invalid\" when the current year is after 2025', t => {\n  t.context.clock.setSystemTime(new Date('2026-01-01')); \n\n  const result = getLicenseValidity();\n\n  t.is(result, 'invalid');\n});\n\n\n\n\n"]}